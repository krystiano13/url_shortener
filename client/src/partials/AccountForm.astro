---
const { mode } = Astro.props;
---

<form class="flex flex-col items-center justify-center gap-8 p-9 pt-16 pb-16 rounded-xl">
    <label class="font-small">
        <span>Username</span> <br />
        <input required class="outline-none font-small" type="text" name="username">
    </label>
    {
        mode === "register" &&
            <label class="font-small">
                <span>Email</span> <br />
                <input required class="outline-none font-small" type="email" name="email">
            </label>
    }
    <label class="font-small">
        <span>Password</span> <br />
        <input required class="outline-none font-small" type="password" name="password1" />
    </label>
    {
        mode === "register" &&
            <label class="font-small">
                <span>Repeat Password</span> <br />
                <input required class="outline-none font-small" type="password" name="password2" />
            </label>
    }
    <button class="font-small w-[80%] text-white bg-cyan p-2 pl-4 pr-4 rounded-xl" type="submit">Register</button>
</form>

<script define:vars={{ mode }}>
    const form = document.querySelector('form');
    const data = new FormData(form);
    const inputs = document.querySelectorAll('input');
    let errors = [];

    //register fetch

    if(mode === "register") {
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            inputs.forEach(item => {
                data.append(item.name, item.value);
            })

            fetch('http://localhost:8000/register', {
                method : "POST",
                body: data
            })
                .then(res => res.json())
                .then(data => {
                    const err = [];
                    if(data.errors) {
                        data.errors.forEach(item => {
                            err.push(item);
                        })
                    }
                    if(data.message) {
                        window.location.href = '/login';
                    }
                    errors = err;
                })
        })
    }
</script>



<script>
    const labels = document.querySelectorAll('label');
    labels.forEach(item => {
        item.querySelector('input').addEventListener('focusin',() => {
            item.classList.add('cyan');
        });

        item.querySelector('input').addEventListener('focusout',() => {
            item.classList.remove('cyan');
        });
    })
</script>

<style>
    section {
        min-height: 40rem;
    }

    form {
        box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
    }

    input {
        border-bottom: solid 1px var(--dark-violet);
        position: relative;
        color: black;
    }

    input:focus {
        border-color: var(--cyan);
    }

    .bg-cyan {
        background-color: var(--cyan);
    }

    .cyan {
        color: var(--cyan);
    }
</style>